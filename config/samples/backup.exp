#!/usr/bin/expect
########################################################################
#
# Copyright 2016, 2021 IBM Corporation and other contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
########################################################################
##      backup.exp                                                    ##
##                                                                    ##
## An example script to backup configuration data from MQ appliance.  ##
## The files will be downloaded to the machine where script is        ##
## executed into a new folder in current working directory named:     ##
##      'applianceBackup<timestamp>'                                  ##
##                                                                    ##
## List of files backed up:                                           ##
##   -> System config: autoconfig.cfg                                 ##
##   -> Users: user_backup                                            ##
##   -> Per QM Backups:                                               ##
##      - QM INI file: <QM_NAME>.ini                                  ##
##      - QM Config file: <QM_NAME>.cfg                               ##
##      - QM Key Repos and Password: <QM_NAME>_keyrepos.tar.gz        ##
##                                 & <QM_NAME>keybackup_password.txt  ##
##                                                                    ##
########################################################################

########################################################################
##                                                                    ##
##            THE FOLLOWING VARIABLES MAY BE CHANGED TO SUIT          ## 
##                          YOUR APPLIANCE                            ##
##                                                                    ##
########################################################################

# Change this to your default appliance hostname or IP address
set applianceHost ""

# Change this to your default appliance user
set applianceUser "admin"

# Passwords are usually specified interactively or as parameters
set appliancePassword ""
set backupLocationPassword ""

########################################################################
##                                                                    ##
##                   END OF USER DEFINED VARIABLES                    ## 
##                                                                    ##
########################################################################

# If it doesn't see the expected line, timeout after 10 minutes.
set timeout 600

# Parse arguments
set argsLength [llength $argv]

# Initialize argument variables
set helpmessage             "usage: expect backup.exp "
append helpmessage          "\n         \[ -appliance_host <appliance hostname or IP address> \] "
append helpmessage          "\n         \[ -appliance_password <appliance password> \] "
append helpmessage          "\n         \[ -appliance_user <appliance user> \] "
append helpmessage          "\n         \[ -backup_password <backup location password> \] "
append helpmessage          "\n"

# Parameter setting
for {set i 0} {$i < $argsLength} {incr i 1} {
    set cur [lindex $argv $i]
    if { $cur == "-h" } {
            send $helpmessage
        exit
    } elseif { $cur == "-appliance_host" } {
            set applianceHost [lindex $argv $i+1]
            incr i 1
    } elseif { $cur == "-appliance_password" } {
            set appliancePassword [lindex $argv $i+1]
            incr i 1
    } elseif { $cur == "-appliance_user" } {
            set applianceUser [lindex $argv $i+1]
            incr i 1
    } elseif { $cur == "-backup_password" } {
            set backupLocationPassword [lindex $argv $i+1]
            incr i 1
    }
}

# Prompt for the appliance host if not provided
if { $applianceHost == "" } {
    send_user -- "Enter the appliance hostname or IP address: "
    expect_user -re "(.*)\n"
    set applianceHost $expect_out(1,string)

    if { $applianceHost == "" } {
        send "Error: No appliance hostname provided. Use -appliance_host <hostname or IP address> or enter interactively. Use -h option to display help.\n"
        exit;
    }
}

# Prompt for the appliance password if not provided
if { $appliancePassword == "" } {
    stty -echo
    send_user -- "Enter password for user $applianceUser at appliance $applianceHost: "
    expect_user -re "(.*)\n"
    send_user "\n"
    stty echo
    set appliancePassword $expect_out(1,string)

    if { $appliancePassword == "" } {
        send "Error: No password provided for the appliance. Use -appliance_password <password> or enter interactively. Use -h option to display help.\n"
        exit;
    }
}

# Set up the SCP location for the appliance to write backup files to.
# Get current working directory
set curDir [exec pwd]

# Get hostname of machine
set hostname $::env(HOSTNAME)

# Get the current user
set user [exec whoami]

# Create a folder to back up to
set clockFormat [clock format [clock seconds] -format %Y%m%d%H%M%S]
set backupFolder "applianceBackup$clockFormat"
exec mkdir $backupFolder

# Set the backup location
set backupLocation "scp://$user@$hostname/$curDir/applianceBackup$clockFormat"

# Obtain the backup location password if not provided
if { $backupLocationPassword == "" } {
    stty -echo
    send_user -- "Enter password for user $user at backup location $hostname: "
    expect_user -re "(.*)\n"
    send_user "\n"
    stty echo
    set backupLocationPassword $expect_out(1,string)

    if { $backupLocationPassword == "" } {
        send "Error: No password provided for the backup location. Use -backup_password <password> or enter interactively. Use -h option to display help.\n"
        exit;
    }
}

# Start the SSH session
# May find it useful to add in -o StrictHostKeyChecking=no
# to automatically answer yes to whether the host should be added 
# to the list of known hosts.
spawn ssh $applianceHost

# Send login information
expect "login:"
send "$applianceUser\n"
expect "Password:"
send "$appliancePassword\n"

# Wait for the prompt before continuing
expect {
        "login:" {
                send_error "Failed to login to the appliance\n"
                exit;
        }
        "#" {
        }
}

# Config mode
send "config\n"
expect "#"

# Back up appliance configuration.
send "write memory\n"
expect "Overwrite"
send "y\n"
expect "#"

# Copy appliance configuration to backup location
send "copy config:///autoconfig.cfg $backupLocation\n"

expect {
        "Password" {
                send "$backupLocationPassword\n"
        }
        # If we see a percentage sign this entails error
        "%" {
                send "exit\n"
                expect "#"
                send "exit\n"
                expect eof
                exit
        }
}


expect {
        "File copy success" {
                expect "#"
        }
        # If we see a percentage sign this entails error
        "%" {
                send "exit\n"
                expect "#"
                send "exit\n"
                expect eof
                exit
        }
}

send "exit\n"
expect "#"
send "mqcli\n"
expect "#"

# Back up messaging users
send "userbackup -f user_backup\n"
expect "#"

send "exit\n"
expect "#"
send "config\n"
expect "#"

# Copy appliance users to backup location
send "copy mqbackup:///user_backup $backupLocation\n"
expect "Password"
send "$backupLocationPassword\n"

expect {
        "File copy success" {
                expect "#"
        }
        # If we see a percentage sign this entails error
        "%" {
                send "exit\n"
                expect "#"
                send "exit\n"
                expect eof
                exit
        }
}

send "exit\n"
expect "#"
send "mqcli\n"
expect "#"

# Get list of Queue Managers
send "dspmq\n"
expect "#"

set myVar $expect_out(buffer)

set records [split $myVar "\n"]

set qmNames [list]

# Iterate over the records
foreach rec $records {
        set matched ""
        set expressionMatch [regexp {QMNAME\((.+?)\)} $rec matched sub1 sub2]
        if { $expressionMatch == 1} {
                lappend qmNames $sub1
        }
}

foreach qm $qmNames {
        puts "QM found: $qm"
}

# Back up key repository (PER QM)
foreach qm $qmNames {
        # Send key back up command per QM
        send "keybackup -m $qm\n"
        expect "Do you wish to continue?"
        send "Y\n"
        
        # These two expect statements will store the password of the key back up in the expect buffer, so we can extract the password.
        expect "'."
        expect "(mqcli)#"
        
        # Find the actual password from the expect buffer using a reg exp.
        set myVar "$expect_out(buffer)\n"

        # Uncomment this line to debug capturing of the password
        # puts "MYVAR: $myVar"
        
        set expressionMatch [regexp {Password for key repository is:\s*([^\n]+)\n} $myVar matched sub1]
        
        # If a match has been found to the reg exp store the password in a file named after the QM.
        if { $expressionMatch == 1 } {
                set filename "$qm\keybackup_password.txt"

                # Open the filename for writing
                set fileId [open $filename "w"]

                # Add the password to the file with name $filename
                puts $fileId $sub1

                # Close the file, ensuring the data is written out before you continue with processing.
                close $fileId

                # Move it to back up folder!!
                exec mv $filename $backupFolder 
        }

        # Back up QM.INI
        send "dspmqini -m $qm\n"
        expect "#"
        
        set filename "$qm.ini"

        # Open the filename for writing
        set fileId [open $filename "w"]

        # Add the password to the file with name $filename
        puts $fileId $expect_out(buffer)

        # Close the file, ensuring the data is written out before you continue with processing.
        close $fileId

        # Move it to back up folder!!
        exec mv $filename $backupFolder 
        
        # Back up QMs (PER QM)
        send "strmqm $qm\n"
        expect "#"
        
        # Back up QMs (PER QM)
        send "dmpmqcfg -m $qm -a\n"
        expect {
                "#" {
                }
                "AMQ8146" {
                        send "exit\n"
                        expect "#"
                        send "exit\n"
                        expect eof
                        exit
                }
        }
        
        send "exit\n"
        expect "#"
        send "config\n"
        expect "#"
        
        # Copy qm cfg back up to backup location
        send "copy mqbackup:///$qm.cfg $backupLocation\n"
        expect "Password"
        send "$backupLocationPassword\n"
        
        expect {
                "File copy success" {
                        expect "#"
                }
                # If we see a percentage sign this entails error
                "%" {
                        send "exit\n"
                        expect "#"
                        send "exit\n"
                        expect eof
                }
        }
        
        # Copy qm key repos back up to backup location
        send "copy mqbackup:///$qm\_keyrepos.tar.gz $backupLocation\n"
        expect "Password"
        send "$backupLocationPassword\n"
        
        expect {
                "File copy success" {
                        expect "#"
                }
                #If we see a percentage sign this entails error
                "%" {
                        send "exit\n"
                        expect "#"
                        send "exit\n"
                        expect eof
                }
        }
        
        send "exit\n"
        expect "#"
        send "mqcli\n"
        expect "#"
}

send "exit\n"
expect "#"
send "exit\n"

puts "BACK UP TO LOCATION: $backupFolder COMPLETED."
expect eof
